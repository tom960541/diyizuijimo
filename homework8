#include <stdio.h>

#define ROWS 5
#define COLS 5

void printMaze(int maze[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%d ", maze[i][j]);
        }
        printf("\n");
    }
}

int is_valid_move(int maze[ROWS][COLS], int row, int col) {
    return (row >= 0 && row < ROWS && col >= 0 && col < COLS && maze[row][col] == 0);
}

int solveMaze(int maze[ROWS][COLS], int row, int col, int endRow, int endCol) {
    // Base cases
    if (row == endRow && col == endCol) {
        maze[row][col] = 2; // Mark the path
        return 1; // Path found
    }

    if (!is_valid_move(maze, row, col)) {
        return 0; // Invalid move
    }

    // Mark the current cell as part of the path
    maze[row][col] = 2;

    // Try moving in all four directions
    if (solveMaze(maze, row - 1, col, endRow, endCol) ||
        solveMaze(maze, row, col - 1, endRow, endCol) ||
        solveMaze(maze, row + 1, col, endRow, endCol) ||
        solveMaze(maze, row, col + 1, endRow, endCol)) {
        return 1; // Path found
    }

    // If no path is found in any direction, backtrack
    maze[row][col] = 0; // Unmark the current cell
    return 0;
}

int main() {
    int maze[ROWS][COLS] = {
        {0, 1, 0, 0, 0},
        {0, 1, 1, 1, 0},
        {0, 0, 0, 0, 0},
        {1, 1, 1, 1, 0},
        {0, 0, 0, 0, 0}
    };

    int startRow = 0, startCol = 0;
    int endRow = 4, endCol = 4;

    printf("Original Maze:\n");
    printMaze(maze);

    if (solveMaze(maze, startRow, startCol, endRow, endCol)) {
        printf("\nPath found!\n");
        printMaze(maze);
    } else {
        printf("\nNo path found!\n");
    }

    return 0;
}

